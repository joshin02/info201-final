if(all(grepl("[:digit:]", vector))) {
print("Yay!")
} else {
print("Oh no!")
}
}
any_digits("hello2")
any_digits("hello")
any_digits <- function(vector) {
if(any(grepl("[:digit:]", vector))) {
print("Yay!")
} else {
print("Oh no!")
}
}
any_digits("hello2")
any_digits("hello")
courses <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
remove_digits(courses)
if(any(grepl("[:digit:]", courses))) {
print("Yay!")
} else {
print("Oh no!")
}
courses2 <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
if(any(grepl("[:digit:]", courses2))) {
print("Yay!")
} else {
print("Oh no!")
}
courses2 <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
if(any(grepl("[:digit:]", courses2))) {
print("Yay!")
} else {
print("Oh no!")
}
if(str_detect(courses, "[:digit:]")) {
print("Oh no!")
} else {
print("Yay!")
}
if(any(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("Yay!")
}
has_digits <- str_detect(courses, "[:digit:]")
if(has_digits) {
print("Oh no!")
} else {
print("Yay!")
}
has_digits <- str_detect(courses, "[0-9]")
if(has_digits) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[:digit:]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[:digit:]", courses2))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[:digit:]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[:digit:]", "hello2"))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[0-9]", "hello"))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[0:9]", "hello"))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[0:9]", "hello5"))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[0-9]", "hello5"))) {
print("Oh no!")
} else {
print("Yay!")
}
if(all(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
## a2-foundational-skills
## -------------------- Set up --------------------
## In this assignment we ask you to use `stringr` package for the string functions.
## Read more about it in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
## Install the library if needed and load it
## Ensure you don't install the library more than once!
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## Create variable `my_name` that is equal to your first name
my_name <- "Joshua"
cat("I am", my_name, "\n")
## Create a numeric variable `my_age` that is equal to your age
my_age <- 18
## How many seconds is there in a year?  Compute this number!
## Assign it to a suitably named variable and print the result
## with a informative message
seconds_in_year <- 31536000
cat("There are", seconds_in_year, "seconds in a year \n")
## What is your age in seconds?  Use the variable 'my_age' you computed
## above and seconds-in-year, and compute it.  Assign the result to a
## suitable named variable
age_in_seconds <- my_age * seconds_in_year
## Are you more than 650M seconds old?  Perform such logical operation and
## assign the result to a variable 'I_am_old'.  Print the result with a
## suitable message
I_am_old <- age_in_seconds > 650000000
cat(age_in_seconds, "greater than 650000000 is", I_am_old, " \n")
### How many seconds is a typical human lifetime?
life_in_seconds <- seconds_in_year * 71
cat("The average lifespan worldwide in seconds is", life_in_seconds, "seconds \n")
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like
## "Hello, my name is {name}, and I'm {age} years old".
## NB!  It should _return_ the string, not print it!
make_introduction <- function(name, age) {
message <- paste("Hello, my name is", name, "and I'm", age, "years old")
return(message)
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age`
## into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
## Create a variable `casual_intro` by substituting "Hello, my name is ",
## with "Hey, I'm" in your `my_intro`
## variable.  Check out base R functions 'sub' and 'gsub', and stringr functions
## 'str_replace' and 'str_replace_all'
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
## Create a new variable `loud_intro`, which is your `my_intro` variable
## in all upper-case letters
loud_intro <- toupper(my_intro)
## Using the `str_count` function, create a variable `occurrences` that
## stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable
## and returns that variable multiplied by two
double <- function(number) {
return(number * 2)
}
## Using your `double` function, create a variable `seconds_in_two_years`,
## which is the number of seconds in two years.
## Always print your results!
seconds_in_two_years <- double(seconds_in_year)
print(seconds_in_two_years)
## Write another function `cube` that takes in a value and returns that value cubed
cube <- function(number) {
return(number ^ 3)
}
## Create a (suitably named) variable by passing the number 3 to your `cube` function
cubed_number <- cube(3)
print(cubed_number)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("Avengers: Endgame", "Spider-Man: Far From Home", "Deadpool", "Hobbs & Shaw", "Uncle Drew", "Coach Carter")
print(movies)
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(top_three, "is a great movie!")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- c(top_three, movies[5:6])
## Create a vector `numbers` that is the numbers 70 through 79
numbers <- 70:79
## Using the built in length function, create a variable `len` that
## is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that
## is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Create a vector `lower_numbers` that is the numbers 60:69
lower_numbers <- 60:69
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
## Ensure the result looks right!
all_numbers <- c(lower_numbers, numbers)
## Which numbers are larger than 70?  Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
greater_than_seventy <- all_numbers > 70
## Compute squares of all numbers that are _smaller_ than 70 in your vector
squared_numbers <- all_numbers[all_numbers < 70] ^ 2
## Print even numbers only in your vector.  Hint: check out the modulo operator
## '%%'
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even_numbers <- squared_numbers[squared_numbers %% 2 == 0]
### -------------------- Challenge --------------------
## Write a function `remove_digits` that will remove all digits (i.e., 0 through 9)
## from all elements in a
## *vector of strings*.
## For instance, "a2b" -> "ab"
remove_digits <- function(vector) {
str_replace_all(vector, "[:digit:]", "")
}
## Demonstrate that your approach is successful by passing a vector of courses to
## your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
courses <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
remove_digits(courses)
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all'
if(all(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
courses2
source('~/Desktop/INFO201/a2-basic-programming-joshin02/assignment.R')
rm(list=ls())
## a2-foundational-skills
## -------------------- Set up --------------------
## In this assignment we ask you to use `stringr` package for the string functions.
## Read more about it in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
## Install the library if needed and load it
## Ensure you don't install the library more than once!
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## Create variable `my_name` that is equal to your first name
my_name <- "Joshua"
cat("I am", my_name, "\n")
## Create a numeric variable `my_age` that is equal to your age
my_age <- 18
## How many seconds is there in a year?  Compute this number!
## Assign it to a suitably named variable and print the result
## with a informative message
seconds_in_year <- 31536000
cat("There are", seconds_in_year, "seconds in a year \n")
## What is your age in seconds?  Use the variable 'my_age' you computed
## above and seconds-in-year, and compute it.  Assign the result to a
## suitable named variable
age_in_seconds <- my_age * seconds_in_year
## Are you more than 650M seconds old?  Perform such logical operation and
## assign the result to a variable 'I_am_old'.  Print the result with a
## suitable message
I_am_old <- age_in_seconds > 650000000
cat(age_in_seconds, "greater than 650000000 is", I_am_old, " \n")
### How many seconds is a typical human lifetime?
life_in_seconds <- seconds_in_year * 71
cat("The average lifespan worldwide in seconds is", life_in_seconds, "seconds \n")
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like
## "Hello, my name is {name}, and I'm {age} years old".
## NB!  It should _return_ the string, not print it!
make_introduction <- function(name, age) {
message <- paste("Hello, my name is", name, "and I'm", age, "years old")
return(message)
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age`
## into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
## Create a variable `casual_intro` by substituting "Hello, my name is ",
## with "Hey, I'm" in your `my_intro`
## variable.  Check out base R functions 'sub' and 'gsub', and stringr functions
## 'str_replace' and 'str_replace_all'
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
## Create a new variable `loud_intro`, which is your `my_intro` variable
## in all upper-case letters
loud_intro <- toupper(my_intro)
## Using the `str_count` function, create a variable `occurrences` that
## stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable
## and returns that variable multiplied by two
double <- function(number) {
return(number * 2)
}
## Using your `double` function, create a variable `seconds_in_two_years`,
## which is the number of seconds in two years.
## Always print your results!
seconds_in_two_years <- double(seconds_in_year)
print(seconds_in_two_years)
## Write another function `cube` that takes in a value and returns that value cubed
cube <- function(number) {
return(number ^ 3)
}
## Create a (suitably named) variable by passing the number 3 to your `cube` function
cubed_number <- cube(3)
print(cubed_number)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("Avengers: Endgame", "Spider-Man: Far From Home", "Deadpool", "Hobbs & Shaw", "Uncle Drew", "Coach Carter")
print(movies)
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(top_three, "is a great movie!")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- c(top_three, movies[5:6])
## Create a vector `numbers` that is the numbers 70 through 79
numbers <- 70:79
## Using the built in length function, create a variable `len` that
## is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that
## is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Create a vector `lower_numbers` that is the numbers 60:69
lower_numbers <- 60:69
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
## Ensure the result looks right!
all_numbers <- c(lower_numbers, numbers)
## Which numbers are larger than 70?  Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
greater_than_seventy <- all_numbers > 70
## Compute squares of all numbers that are _smaller_ than 70 in your vector
squared_numbers <- all_numbers[all_numbers < 70] ^ 2
## Print even numbers only in your vector.  Hint: check out the modulo operator
## '%%'
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even_numbers <- squared_numbers[squared_numbers %% 2 == 0]
### -------------------- Challenge --------------------
## Write a function `remove_digits` that will remove all digits (i.e., 0 through 9)
## from all elements in a
## *vector of strings*.
## For instance, "a2b" -> "ab"
remove_digits <- function(vector) {
str_replace_all(vector, "[:digit:]", "")
}
## Demonstrate that your approach is successful by passing a vector of courses to
## your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
courses <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
remove_digits(courses)
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all'
if(all(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
source(assignment.R)
source('~/Desktop/INFO201/a2-basic-programming-joshin02/assignment.R')
x <- c(1, 2, 3)
y <- c(4, 1, 7)
fips <- c(52001, 52002, 52013)
df <- data.frame(x, y, fips)
View(df)
ggplot(df, aes(x, y, col=fips)) + geom_point(size=10)
library(ggplot2)
ggplot(df, aes(x, y, col=fips)) + geom_point(size=10)
ggplot(df, aes(x, y, col=factor(fips))) + geom_point(size=10)
setwd("~/Desktop/INFO201/info201-final")
data2000 <- read.csv("nba-data/2000.csv")
View(data2000)
data2000 <- read.csv("nba-data/2000.csv")
data2000 <- read.csv("nba-data/2000.csv")
data2000 <- read.csv("nba-data/2000.csv")
data2001 <- read.csv("nba-data/2001.csv")
data2002 <- read.csv("nba-data/2002.csv")
data2003 <- read.csv("nba-data/2003.csv")
data2004 <- read.csv("nba-data/2004.csv")
data2005 <- read.csv("nba-data/2005.csv")
data2006 <- read.csv("nba-data/2006.csv")
data2007 <- read.csv("nba-data/2007.csv")
data2008 <- read.csv("nba-data/2008.csv")
data2009 <- read.csv("nba-data/2009.csv")
data2010 <- read.csv("nba-data/2010.csv")
data2011 <- read.csv("nba-data/2011.csv")
data2012 <- read.csv("nba-data/2012.csv")
data2013 <- read.csv("nba-data/2013.csv")
data2014 <- read.csv("nba-data/2014.csv")
data2015 <- read.csv("nba-data/2015.csv")
data2016 <- read.csv("nba-data/2016.csv")
data2017 <- read.csv("nba-data/2017.csv")
data2018 <- read.csv("nba-data/2018.csv")
data2019 <- read.csv("nba-data/2019.csv")
data2020 <- read.csv("nba-data/2020.csv")
View(data2000)
View(data2001)
View(data2003)
cleanData("data2000")
cleanData <- function(data) {
data %>%
mutate(year = substring(data, 5, 8)) %>%
select(Player, X3P, X3PA, X3P)
}
cleanData("data2000")
cleanData(data2000)
cleanData <- function(data) {
DATA <- evaluate(data)
DATA %>%
mutate(year = substring(DATA, 5, 8)) %>%
select(Player, X3P, X3PA, X3P)
}
cleanData("data2000")
cleanData <- function(data) {
DATA <- eval(data)
DATA %>%
mutate(year = substring(DATA, 5, 8)) %>%
select(Player, X3P, X3PA, X3P)
}
cleanData("data2000")
data2000 %>%
mutate(year = "2000") %>%
select(Player, X3P, X3PA, X3P)
library(tidyverse)
library(tidyverse)
cleanData <- function(data) {
DATA <- eval(data)
DATA %>%
mutate(year = substring(DATA, 5, 8)) %>%
select(Player, X3P, X3PA, X3P)
}
cleanData("data2000")
cleanData <- function(data) {
data %>%
mutate(year = substring(data, 5, 8)) %>%
select(Player, X3P, X3PA, X3P)
}
cleanData("data2000")
cleanData(data2000)
cleanData <- function(data, yr) {
data %>%
mutate(year = yr) %>%
select(Player, X3P, X3PA, X3P)
}
cleanData(data2000, "2000")
cleanData <- function(data, yr) {
data %>%
mutate(year = yr) %>%
select(Player, X3P, X3PA, X3P.)
}
cleanData(data2000, "2000")
View(data2000)
cleanData(data2000, "2000")
v
cleanData <- function(data, yr) {
data %>%
mutate(year = yr) %>%
select(year, Player, X3P, X3PA, X3P.)
}
cleanData(data2000, "2000")
cleanData(data2001, "2001")
cleanData(data2002, "2002")
cleanData(data2003, "2003")
cleanData(data2004, "2004")
cleanData(data2005, "2005")
cleanData(data2006, "2006")
cleanData(data2007, "2007")
cleanData(data2008, "2008")
cleanData(data2009, "2009")
cleanData(data2010, "2010")
cleanData(data2011, "2011")
cleanData(data2012, "2012")
cleanData(data2013, "2013")
cleanData(data2014, "2014")
cleanData(data2015, "2015")
cleanData(data2016, "2016")
cleanData(data2017, "2017")
cleanData(data2018, "2018")
cleanData(data2019, "2019")
cleanData(data2020, "2020")
cleanData(data2001, "2001")
View(data2000)
View(data2000)
